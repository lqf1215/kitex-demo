// Code generated by Kitex v0.4.2. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	service "github.com/lqf1215/kitex-demo/kitex_gen/service"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*service.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserList": kitex.NewMethodInfo(getUserListHandler, newGetUserListArgs, newGetUserListResult, false),
		"GetUserById": kitex.NewMethodInfo(getUserByIdHandler, newGetUserByIdArgs, newGetUserByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.2",
		Extra:           extra,
	}
	return svcInfo
}

func getUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(service.GetUserListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(service.UserService).GetUserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserListArgs:
		success, err := handler.(service.UserService).GetUserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserListResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserListArgs() interface{} {
	return &GetUserListArgs{}
}

func newGetUserListResult() interface{} {
	return &GetUserListResult{}
}

type GetUserListArgs struct {
	Req *service.GetUserListReq
}

func (p *GetUserListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(service.GetUserListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserListArgs) Unmarshal(in []byte) error {
	msg := new(service.GetUserListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserListArgs_Req_DEFAULT *service.GetUserListReq

func (p *GetUserListArgs) GetReq() *service.GetUserListReq {
	if !p.IsSetReq() {
		return GetUserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserListResult struct {
	Success *service.GetUserListResp
}

var GetUserListResult_Success_DEFAULT *service.GetUserListResp

func (p *GetUserListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(service.GetUserListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserListResult) Unmarshal(in []byte) error {
	msg := new(service.GetUserListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserListResult) GetSuccess() *service.GetUserListResp {
	if !p.IsSetSuccess() {
		return GetUserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*service.GetUserListResp)
}

func (p *GetUserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(service.GetUserByIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(service.UserService).GetUserById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserByIdArgs:
		success, err := handler.(service.UserService).GetUserById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserByIdArgs() interface{} {
	return &GetUserByIdArgs{}
}

func newGetUserByIdResult() interface{} {
	return &GetUserByIdResult{}
}

type GetUserByIdArgs struct {
	Req *service.GetUserByIdReq
}

func (p *GetUserByIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(service.GetUserByIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserByIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserByIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserByIdArgs) Unmarshal(in []byte) error {
	msg := new(service.GetUserByIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserByIdArgs_Req_DEFAULT *service.GetUserByIdReq

func (p *GetUserByIdArgs) GetReq() *service.GetUserByIdReq {
	if !p.IsSetReq() {
		return GetUserByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserByIdResult struct {
	Success *service.UserData
}

var GetUserByIdResult_Success_DEFAULT *service.UserData

func (p *GetUserByIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(service.UserData)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserByIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserByIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserByIdResult) Unmarshal(in []byte) error {
	msg := new(service.UserData)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserByIdResult) GetSuccess() *service.UserData {
	if !p.IsSetSuccess() {
		return GetUserByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*service.UserData)
}

func (p *GetUserByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserList(ctx context.Context, Req *service.GetUserListReq) (r *service.GetUserListResp, err error) {
	var _args GetUserListArgs
	_args.Req = Req
	var _result GetUserListResult
	if err = p.c.Call(ctx, "GetUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, Req *service.GetUserByIdReq) (r *service.UserData, err error) {
	var _args GetUserByIdArgs
	_args.Req = Req
	var _result GetUserByIdResult
	if err = p.c.Call(ctx, "GetUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
